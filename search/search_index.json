{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Tweakbox for Sonic Riders \u26f8 Catch me if you can \ud83d\udef9 <p>All in one mod for Sonic Riders PC.</p> <p>Also commonly known as the \"Netplay Mod\", Tweakbox is an all in one Reloaded II mod for Sonic Riders which adds various pieces of functionality to the PC version of Sonic Riders.</p> <p>This project is currently a \"work in progress\"; while it is usable/playable, this project is not yet \"ready for public consumption\" at this moment in time. Tread at your own risk. </p>"},{"location":"#samples","title":"Samples","text":"<p>*Online Mutliplayer*</p> <p>*Gear &amp; Physics Editing*</p>"},{"location":"animated-textures/","title":"Animated Textures","text":"<p>Riders.Tweakbox provides basic support for animated textures.</p> <p>In order to make an animated texture, you should create a folder with the name of the texture; and inside that folder, make files with file names corresponding to individual keyframes of the animation.</p> <p>The built-in texture animator will play back your animation, starting with the last frame of animation. As Riders runs at 60 frames per second, a file with the name of <code>060</code>, will run on the 60th frame.</p> <p>Tip: When dealing with many textures, a tool like Bulk Rename Utility might come in handy.</p>"},{"location":"animated-textures/#warning","title":"Warning","text":"<p>It is recommended to use this feature sparringly.</p> <p>High framerate animated textures are expensive on video memory, especially when paired with high resolutions. Going too far might make it hard for people with integrated graphics to run your mod. </p> <p>PLEASE OPTIMISE YOUR ANIMATED TEXTURES The examples here use PNGs for clarity; when you release your textures, you should use native DDS files.</p>"},{"location":"animated-textures/#basic-example","title":"Basic Example","text":"<p>Alternate between two colours using a specified time interval.</p> <p> </p> <p>In this scenario, the green texture for 30 frames (0.5 seconds) before switching to the red texture. After another 30 frames, you will go back to the green texture.</p>"},{"location":"animated-textures/#more-colours","title":"More Colours","text":"<ul> <li>The pink texture will show for 20 frames.</li> <li>Then the green will show for 30 frames.</li> <li>Then the light blue w ill show for 40 frames.</li> <li>Then the blue will show for 50 frames. repeat</li> </ul>"},{"location":"animated-textures/#full-animation","title":"Full Animation","text":"<p>Create Hyper Sonic by changing Super Sonic's texture every frame.</p> <p> </p> <p>[Frame 74 of the Animation]</p>"},{"location":"building/","title":"Building","text":"<p>This is a summary. For additional guidance, please refer to the Reloaded-II documentation.</p> <p>To build the mod, you will require the following components:</p> <ul> <li>Git</li> <li>.NET 6 SDK</li> <li>Visual Studio 2022</li> </ul>"},{"location":"building/#steps","title":"Steps","text":"<ul> <li> <p>Clone this repository (and its submodules). <pre><code>git clone --recursive https://github.com/Sewer56/Riders.Tweakbox.git\n</code></pre></p> </li> <li> <p>Add an environment variable named <code>RELOADEDIIMODS</code>.</p> </li> </ul> <p></p> <p>The value should be the of the <code>Mods</code> folder in your Reloaded folder.</p> <ul> <li>Open <code>Riders.Tweakbox.sln</code> in Visual Studio or your preferred editing environment of choice.</li> </ul>"},{"location":"building/#publishing","title":"Publishing","text":"<p>Publishing builds this mod in an optimized format such that it is ready for end users to consume.</p> <ol> <li> <p>Open a PowerShell prompt and navigate to the <code>Riders.Tweakbox</code> folder.</p> </li> <li> <p>Run the Publish script with <code>.\\Publish.ps1</code>. </p> </li> <li> <p>This will automatically build the mod, make a folder called <code>Publish</code> and put a zipped compiled version of the mod there ready to be shared.</p> </li> </ol>"},{"location":"custom-gears/","title":"Adding Gears","text":"<p>Tweakbox allows you to add custom gears to the game, expanding the vanilla game's total gear selection up to 255 gears.</p> <p></p> <p>Each custom gear can have its own icon, title and name and be selectable by any of the characters involved.</p>"},{"location":"custom-gears/#getting-started","title":"Getting Started","text":"<p>You can add additional gears by creating Reloaded II mods.</p> <p>This is a short summary of how to create a mod; for a more in-depth guide on creating mods, please refer to the Reloaded-II documentation.</p>"},{"location":"custom-gears/#1-make-a-new-mod","title":"1. Make a new Mod","text":""},{"location":"custom-gears/#2-enable-it-for-sonic-riders","title":"2. Enable it for Sonic Riders","text":"<p>And go to your mod directory.</p>"},{"location":"custom-gears/#3-create-the-gear-directory","title":"3. Create the Gear Directory","text":"<p>Inside mod directory, create a folder called <code>Tweakbox</code> and inside it, a folder called <code>Gears</code>.</p> <p></p> <p></p>"},{"location":"custom-gears/#4-create-the-gear","title":"4. Create the Gear","text":"<p>Inside Tweakbox, go to the <code>Gear Editor</code>, make desired changes to your gear and select <code>Export as Custom Gear</code>.</p> <p></p>"},{"location":"custom-gears/#5-copy-the-gear","title":"5. Copy the Gear","text":"<p>Tweakbox should open a folder in <code>Windows Explorer</code>. Copy this folder to the folder you created in Step 3.</p> <p></p> <p></p> <p>Make sure your mod is enabled in Reloaded and restart the game.</p>"},{"location":"custom-gears/#6-update-the-gear","title":"6. Update the Gear","text":"<p>After restarting, your gear should show up in the <code>Gear Editor</code>.</p> <p>If you need to make any further changes to the gear, perform them via the Gear Editor and then press the <code>Update Custom Gear Data</code> button.</p> <p></p>"},{"location":"custom-gears/#animated-textures","title":"Animated Textures","text":"<p>In order to use animated textures for the icon and gear title, create a folder with the same name as the PNG without an extension.</p> <p>Inside, put your animated texture keyframes.</p> <p> </p> <p></p> <p>For more information refer to the Animated Textures page.</p>"},{"location":"custom-music/","title":"Adding Music","text":"<p>Riders.Tweakbox allows you to add ADX music to the game to provide alternative tracks to the game's default soundtrack. </p> <p>When the game is about to play a music track, Tweakbox will randomly choose from a collection of vanilla tracks + all of the user provided tracks.</p> <p>Don't know how to create an ADX track? Google it!</p>"},{"location":"custom-music/#getting-started","title":"Getting Started","text":"<p>You can add/replace music by creating Reloaded II mods.</p> <p>This is a short summary of how to create a mod; for a more in-depth guide on creating mods, please refer to the Reloaded-II documentation.</p>"},{"location":"custom-music/#1-make-a-new-mod","title":"1. Make a new Mod","text":""},{"location":"custom-music/#2-enable-it-for-sonic-riders","title":"2. Enable it for Sonic Riders","text":"<p>And go to your mod directory.</p>"},{"location":"custom-music/#3-create-the-music-directory","title":"3. Create the Music Directory","text":"<p>Inside mod directory, create a folder called <code>Tweakbox</code> and inside it, a folder called <code>Music</code>.</p> <p></p> <p></p>"},{"location":"custom-music/#4-add-the-music","title":"4. Add the Music","text":"<p>Tweakbox detects newly added music in real time. If you add a track, it will become a candidate to be played next time.</p>"},{"location":"custom-music/#replacement-modes","title":"Replacement Modes","text":"<p>Tweakbox supports two modes of music replacement: - Per File - Per Stage  </p>"},{"location":"custom-music/#per-file","title":"Per File","text":"<p>In this mode, if you add a file with name equivalent to a vanilla track; it will (randomly) replace the vanilla track.</p> <p></p>"},{"location":"custom-music/#per-stage","title":"Per Stage","text":"<p>In this mode, you can add a music track to be (randomly) played on a specific stage.</p> <p>To use this mode, name your music file <code>STGXX</code> where <code>XX</code> represents the index of the track, for example:</p> <ul> <li>00 = Test Level</li> <li>01 = Metal City </li> <li>02 = Splash Canyon</li> <li>09 = Night Chase</li> </ul> <p></p>"},{"location":"custom-music/#multiple-music-tracks","title":"Multiple Music Tracks","text":"<p>If you have multiple music tracks which you wish to include to replace a single track, put them in separate folders:</p> <p></p> <p></p> <p>In this example, each of the folders has a file called <code>S20.adx</code> inside. In this example, we add 16 menu themes to the game.</p>"},{"location":"custom-music/#customizing-behaviour","title":"Customizing Behaviour","text":"<p>You can customize the music injection behaviour inside Tweakbox Settings.</p> <p></p>"},{"location":"features/","title":"Features","text":"<p>\u2714 Fully Implemented &amp; Reliably Working \u26a0 Work in Progress / Has Issues \u274c Not Yet Implemented \ud83d\udca2 Not Yet Implemented (Low Priority)</p>"},{"location":"features/#netplay-online-multiplayer","title":"\ud83c\udf0d Netplay / Online Multiplayer","text":""},{"location":"features/#general-features","title":"\ud83d\ude80 General Features","text":"<p>\u2714 Single-Screen Mode \u2714 Split-Screen Mode \u2714 Spectator Mode \u2714 Multiplayer Online \u2714 Custom Jitter Buffer (Reduced Player Stuttering) \u2714 NAT Punching (No Port Forwarding Required) \u2714 Server Browser \u2714 Texture Injection \u2714 Music Injection \ud83d\udca2 Custom Game Modes (Relay, Hide &amp; Seek)</p>"},{"location":"features/#menu-synchronization","title":"\ud83d\udcab Menu Synchronization","text":"<p>\u2714 Stage Select Menu \u2714 Character Select Menu \u2714 Race Settings Menu \u2714 Return Straight to Stage Select Post Race \u2714 Disconnect Clients Leaving Stage Select Post Race  </p>"},{"location":"features/#in-race","title":"\ud83d\udca5 In-Race","text":"<p>\u2714 Accurate Physics (Speed, Rotation, Position, Turning, AnalogInput) \u2714 Accurate Attacks (Client-Side) \u2714 Accurate Race Start Time (~1 frame difference) \u2714 Player State \u2714 Game Data (Custom Gears/Physics) \u2714 Lap Counter \u2714 Race Finish Time \u2714 Skip Intro Cutscene \u2714 Control Player Post Race Finish (It's Funny!)  </p> <p>\u26a0 Random Number Generator* \u26a0 Separate Item Random Number Generator**  </p> <p>\u2714 Pauseless Pause Menu \u2714 Post-Race Pause/Results Menu Synchronization \u274c Ramp/Trick Synchronization \ud83d\udca2 Player Indicators in Split Screen \ud83d\udca2 Player Indicators for 5P/6P/7P/8P \ud83d\udca2 Lap Timer Synchronization \ud83d\udca2 Battle Mode Spawn Synchronization \ud83d\udca2 Battle Mode Health Synchronization \ud83d\udca2 Movement Extrapolation (Roll-forward/Real-time prediction of player position)</p> <p>* Desyncs in single-screen mode due to off-screen objects seeding RNG. ** Can desync on extremely unstable connections.</p>"},{"location":"features/#anti-cheat","title":"\ud83d\uded1 Anti-Cheat","text":"<p>An optional feature for when things become more stable...</p> <p>\ud83d\udca2 Anti Lap Counter Manipulation \ud83d\udca2 Anti Ring Counter Manipulation \ud83d\udca2 Anti Teleport \ud83d\udca2 Anti Gear &amp; Physics Data Manipulation \ud83d\udca2 Anti Speed Hack \ud83d\udca2 Anti RNG Unrandomizer</p>"},{"location":"features/#graphics","title":"\u2728 Graphics","text":"<p>\u2714 Use Direct3D 9Ex Renderer (better fullscreen, performance gains) \u2714 Fixed Performance Issues on Multi-core Systems \u2714 Fixed Frame Pacing (no more micro-stutters) \u2714 Borderless Windowed \u2714 Custom Resolution \u2714 Toggle Blur \u26a0 Dynamic Widescreen Hack*  </p> <p>*  WIP, Suggest using GameMasterPlc's Widescreen EXE in the Meantime.</p>"},{"location":"features/#editors","title":"\u2699\ufe0f Editors","text":"<p>\u2714 Gear Editor \u2714 Physics Editor - \u2714 Running Physics - \u2714 Character Type Stats</p>"},{"location":"features/#gameplay","title":"\ud83c\udfae Gameplay","text":"<p>\u2714 Simulate Keyboard QTE Bug \u2714 Force Single Player Stages \u2714 Force Single Player Models</p>"},{"location":"features/#miscellaneous","title":"\ud83c\udf0c Miscellaneous","text":"<p>\u2714 Boot to Menu \u2714 Unlock All \u2714 Import Gear Data from Dolphin Emulator (GameCube Version) \u2714 Various Debug Tools</p>"},{"location":"installation/","title":"Installation","text":"<p>Please do not ask for Tech Support (e.g. \"How do I use this mod\"). The mod is incomplete, buggy and still a work in progress; it is not yet in a state I consider acceptable for normal end users. Thank you.</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Reloaded-II. (Quick Start)</li> <li>Unmodified Copy of PC Riders</li> </ul>"},{"location":"installation/#recommendations","title":"Recommendations","text":"<ul> <li>GameMaster's 16:9 EXE </li> <li>Optional: Use either this or Tweakbox' (incomplete) widescreen hack. Resolution can be overwritten inside Tweakbox.</li> </ul>"},{"location":"installation/#instructions","title":"Instructions","text":"<p>This is a Reloaded-II mod. If you are unfamiliar with Reloaded-II, consider looking here.</p> <ul> <li>Download <code>Riders.Tweakbox.zip</code>.</li> <li>Navigate to the <code>Mods</code> folder inside your Reloaded folder.</li> <li>Create a folder called <code>riders.utils.tweakbox</code>.</li> <li>Extract the contents of the zip to the folder you just created.</li> <li>Enable inside the Reloaded-II launcher.</li> </ul> <p></p> <p>PLEASE report any bugs/inconsistencies/crashes as soon as you encounter them using the guidelines listed in reporting-issues.</p>"},{"location":"optimizing-textures/","title":"Optimizing Textures","text":"<p>These are just very basic guidelines towards optimizing textures for efficiency, such that they can load fast, run fast and use little memory.</p> <p>The optimizations here can also be manually applied by my texture optimisation tool.</p> <p>My general advice is to make very high resolution textures and then simply scale them down to multiple target resolutions using an automated tool like mine.</p>"},{"location":"optimizing-textures/#optimizing-for-size","title":"Optimizing for Size","text":"<p>It is recommended that you scale your texture resolutions using powers of 2 compared to the original game.</p> <p>The original game was optimized around displaying on a 480p screen, as such, if you are targeting a 960p screen and your texture was <code>128x128</code>, your texture should be <code>256x256</code>.</p> <p>As a general rule of thumb: - For up to 720p target 2x original Resolution (960p) - For up to 1440p target 4x original Resolution (1920p) - For up to 5K target 8x original Resolution (3840p)  </p> <p>Ideally, you should provide separate downloads for the first two options above.</p> <p>It is also important you maintain aspect ratio of the original textures and use powers of 2 for width and height.</p>"},{"location":"optimizing-textures/#texture-compression","title":"Texture Compression","text":"<p>While Tweakbox supports PNGs, it is recommended that you only use them for testing as they are slow to load and use a lot of memory. </p> <p>You should use instead use DDS files with native texture compression formats. Unfortunately, as Riders runs on DirectX 9, support for efficient, high quality texture formats is limited. </p> <p>The best candidates, DXT1 &amp; DXT5 can be a tiny bit blocky and produce color banding where there are sporadic changes in colour (e.g. rainbow gradient). Uncompressed textures on the other hand (PNG, R8G8B8A8) are very memory inefficient.</p>"},{"location":"optimizing-textures/#recommendation","title":"Recommendation:","text":"<ul> <li>UI elements: Use uncompressed textures (DDS w/ R8G8B8A8).</li> <li>Stage elements: Use DXT1 (no transparency) &amp; DXT5 (transparency) where applicable.</li> </ul> <p>Uncompressed textures are very large, so consider using my optimisation tool with the custom DDS.LZ4 format supported by Tweakbox.</p>"},{"location":"optimizing-textures/#memory-usage","title":"Memory Usage","text":"<ul> <li>Doubling your resolution (256x256 -&gt; 512x512) increases memory usage by 4 times.</li> </ul>"},{"location":"optimizing-textures/#texture-formats","title":"Texture Formats","text":"<ul> <li>R8G8B8A8 is uncompressed and uses 4 bytes per pixel.</li> <li>DXT5 uses 1 byte per pixel.   (75% reduction)</li> <li>DXT1 uses 0.5 byte per pixel. (87.5% reduction)</li> </ul> <p>PNGs are automatically decoded to R8G8B8A8, and thus use 4 bytes.</p>"},{"location":"reporting-issues/","title":"Reporting Issues","text":"<p>I am currently interested in: - Netplay Crashes - Misc. Bugs</p>"},{"location":"reporting-issues/#what-to-include-crash-reports","title":"What to Include (Crash Reports)","text":"<p>When submitting a crash report, you should include the following:</p> <ul> <li>Reloaded Console Log</li> </ul> <p>You can find the log if you navigate to <code>%appdata%/Reloaded-Mod-Loader-II/Logs</code> inside explorer.</p> <p></p> <p>Sort by \"Date Modified\" and grab the latest log.</p> <p></p> <ul> <li>Crash Dump</li> </ul> <p>Open Windows Explorer and navigate to <code>%localappdata%/CrashDumps</code>.</p> <p></p> <p>Sort by \"date modified\" and copy the latest dump with <code>SonicRiders.exe</code> in the name.</p> <p>If you are recording your gameplay, the moment of the crash would also be greatly appreciated.</p>"},{"location":"reporting-issues/#where-to-report-issues","title":"Where to Report Issues?","text":"<p>Preferably if possible, please report issues to GitHub Issues.</p> <p>Alternatively, you can contact me in the Extreme Gear Labs Discord Channel; use any channel of you liking.</p>"},{"location":"textures/","title":"Adding Textures","text":"<p>Riders.Tweakbox allows you to replace textures in real-time by hijacking function calls to the Direct3D 9 API.</p>"},{"location":"textures/#creating-a-texture-pack","title":"Creating a Texture Pack","text":"<p>You can add/replace textures by creating Reloaded II mods.</p> <p>This is a short summary of how to create a mod; for a more in-depth guide on creating mods, please refer to the Reloaded-II documentation.</p>"},{"location":"textures/#1-make-a-new-mod","title":"1. Make a new Mod","text":""},{"location":"textures/#2-enable-it-for-sonic-riders","title":"2. Enable it for Sonic Riders","text":"<p>And go to your mod directory.</p>"},{"location":"textures/#3-create-the-texture-directory","title":"3. Create the Texture Directory","text":"<p>Inside mod directory, create a folder called <code>Tweakbox</code> and inside it, a folder called <code>Textures</code>.</p> <p></p> <p></p>"},{"location":"textures/#4-add-the-textures","title":"4. Add the Textures","text":"<p>Add textures in one of the supported formats.</p> <p></p> <p>Tweakbox detects newly added textures in real time; however cannot force Reload them. In other words, if you add a stage texture you will have to exit and re-enter the stage before the new texture takes effect.</p>"},{"location":"textures/#where-do-i-get-the-textures","title":"Where do I get the Textures?","text":"<p>The easiest way to get a hold of the stock textures is to use a known dumped texture set, such as the Community Sonic Riders Texture Library.  (Has ~99% of the textures, neatly categorized).</p> <p>Alternatively, you can dump them yourself from inside Tweakbox, if you visit the DirectX Texture Injection menu from Tweakbox.</p> <p></p>"},{"location":"textures/#supported-formats","title":"Supported Formats","text":"<ul> <li>PNG</li> <li>DDS</li> <li>DDS.LZ4</li> </ul> <p>In the case of DDS, there is no restriction on internal format; as long as DirectX supports it.</p> <p>In the case of DDS.LZ4; it is a custom variant of DDS compressed with the LZ4 compression algorithm exported by my texture optimisation tool.</p>"},{"location":"BookOfTheTweakbox/","title":"Book of the Tweakbox","text":"<p>Welcome to the Book of the Tweakbox (BOTT) for Riders Tweakbox. This page contains a collection of articles about the internals of both Riders Tweakbox itself, as well as Sonic Riders. The intended audience of this book is people wishing to work on Tweakbox, or wishing to understand Tweakbox and/or the base game.</p> Page Description Introduction Describes the general structure/layout of Tweakbox' source code. Overlay Helper APIs Useful APIs for creating menus in Tweakbox. Heap Describes how Sonic Riders' memory allocator works."},{"location":"BookOfTheTweakbox/heap/","title":"Heap","text":"<p>Info</p> <p>Explains how Sonic Riders' vanilla memory allocation system works.</p>"},{"location":"BookOfTheTweakbox/heap/#changes-in-tweakbox","title":"Changes in Tweakbox","text":"<p>Todo</p> <p>To be added.</p>"},{"location":"BookOfTheTweakbox/introduction/","title":"Introduction","text":"<p>Info</p> <p>Provides an introduction to Tweakbox' internal code structure, including how things are laid out.  </p>"},{"location":"BookOfTheTweakbox/introduction/#initialization","title":"Initialization","text":"<p>Info</p> <p>Provides a simplified top level view of how initialization happens in Tweakbox.  </p> <p></p>"},{"location":"BookOfTheTweakbox/introduction/#entry-point-program","title":"Entry Point (Program)","text":"<p>The life of Tweakbox begins in <code>Program.StartEx()</code>, this method is responsible for the following: - Setting up 3rd party libraries (e.g. one time method calls). - Fetching Reloaded dependencies [e.g. File Redirector to use with music]. - Adjusting anything runtime related.  </p> <p>Program then delegates to <code>Tweakbox</code>, which sets up Tweakbox' code.  </p>"},{"location":"BookOfTheTweakbox/introduction/#tweakbox-entry-point-tweakbox","title":"Tweakbox Entry Point (Tweakbox)","text":"<p>The <code>Tweakbox</code> component is responsible for the following [in order]: - Sanity checks (e.g. ensure files don't use vanilla compression). - Setting up UI Menus. - Initialising all <code>IConfiguration</code>(s), <code>ISingletonService</code>(s) &amp; <code>IController</code>(s) in this specific order.</p>"},{"location":"BookOfTheTweakbox/introduction/#components","title":"Components","text":"<p>Info</p> <p>Defines the common kinds/types of items you'll find in Tweakbox' source code.  </p> <p>Note</p> <p>Unless stated otherwise, assume components are singletons, i.e. there is only ONE instance of each configuration in memory and it's reused everywhere.  </p>"},{"location":"BookOfTheTweakbox/introduction/#configs-iconfiguration","title":"Configs (IConfiguration)","text":"<p>Info</p> <p>Stores an individual configuration for a component or a set of Tweakbox components.  </p> <p>Within Tweakbox' source, you will find two types of configurations, <code>Binary</code> and <code>JSON</code>. </p> <p><code>JSON</code> configurations are used when all of the data is known, and inherit from <code>JsonConfigBase</code> which provides all of the backbone code for the configuration(s).  </p> <p>Example: <pre><code>// JsonConfigBase inherits from IConfiguration and provides all needed boilerplate code.\npublic class TextureInjectionConfig : JsonConfigBase&lt;TextureInjectionConfig, TextureInjectionConfig.Internal&gt; \n{\n    public class Internal\n    {\n        public bool DumpTextures = false;\n        public DumpingMode DumpingMode = DumpingMode.All;\n        public int DeduplicationMaxFiles = 2;\n    }\n\n    public enum DumpingMode\n    {\n        All = 0,\n        OnlyNew = 1,\n        Deduplicate = 2,\n    }\n}\n</code></pre></p> <p><code>Binary</code> configurations are typically used when the data: - Needs to be small. - Contains unknown values (e.g. Not fully reversed Sonic Riders' game structs).  </p> <p>Example <code>Binary</code> configuration: <pre><code>public unsafe class GearEditorConfig : IConfiguration\n{\n    private static GearEditorConfig _default = new GearEditorConfig();\n\n    /// &lt;summary&gt;\n    /// Extreme gears assigned to this config.\n    /// &lt;/summary&gt;\n    public ExtremeGear[] Gears;\n\n    /// &lt;summary&gt;\n    /// Creates the default editor config.\n    /// &lt;/summary&gt;\n    public GearEditorConfig()\n    {\n        Gears = new ExtremeGear[Player.OriginalNumberOfGears];\n        Player.Gears.CopyTo(Gears, Gears.Length);\n    }\n\n    /// &lt;summary&gt;\n    /// Creates a &lt;see cref=\"GearEditorConfig\"/&gt; from the values present in game memory.\n    /// &lt;/summary&gt;\n    public static GearEditorConfig FromGame() =&gt; new GearEditorConfig();\n\n    /// &lt;summary&gt;\n    /// Updates the game information with the gear data stored in the class.\n    /// &lt;/summary&gt;\n    public unsafe void Apply() =&gt; Player.Gears.CopyFrom(Gears, Player.OriginalNumberOfGears);\n\n    /// &lt;inheritdoc /&gt;\n    public Action ConfigUpdated { get; set; }\n    public byte[] ToBytes() =&gt; LZ4.CompressLZ4Stream(StructArray.GetBytes(Gears), LZ4Level.L12_MAX);\n\n    public void FromBytes(Span&lt;byte&gt; bytes)\n    {\n        var outputArray = new byte[StructArray.GetSize&lt;ExtremeGear&gt;(Player.OriginalNumberOfGears)];\n        var decompressed = LZ4.DecompressLZ4Stream(outputArray, bytes, out int bytesRead);\n\n        StructArray.FromArray(decompressed, out Gears, true, Player.OriginalNumberOfGears);\n        ConfigUpdated?.Invoke();\n    }\n\n    public IConfiguration GetCurrent() =&gt; FromGame();\n    public IConfiguration GetDefault() =&gt; _default;\n}\n</code></pre></p> <p>[Stores the whole array of all extreme gear data in Riders]</p>"},{"location":"BookOfTheTweakbox/introduction/#services-isingletonservice","title":"Services (ISingletonService)","text":"<p>Info</p> <p>Provides various utility functions to be used throughout Tweakbox. Also a singleton.</p> <p>Example API(s):  </p> <pre><code>/// &lt;summary&gt;\n/// Keeps track of all music tracks provided by other mods (as well as the vanilla game)\n/// &lt;/summary&gt;\npublic class MusicService\n{\n    /// &lt;summary&gt;\n    /// Gets the name of a random alternative track for a given file name.\n    /// &lt;/summary&gt;\n    /// &lt;param name=\"fileName\"&gt;The file name for which to get a replacement track.&lt;/param&gt;\n    /// &lt;param name=\"includeVanilla\"&gt;Whether to include vanilla tracks or not.&lt;/param&gt;\n    /// &lt;param name=\"includePerStageTracks\"&gt;Whether to include stage-specific tracks.&lt;/param&gt;\n    /// &lt;returns&gt;Path to the replacement track.&lt;/returns&gt;\n    public unsafe string GetRandomTrack(string fileName, bool includeVanilla, bool includePerStageTracks);\n\n    /// &lt;summary&gt;\n    /// Obtains all potential candidate tracks for a given stage.\n    /// &lt;/summary&gt;\n    /// &lt;param name=\"stageId\"&gt;The stage index.&lt;/param&gt;\n    /// &lt;param name=\"files\"&gt;List of files to add the candidates to.&lt;/param&gt;\n    public void GetTracksForStage(int stageId, List&lt;string&gt; files);\n}\n</code></pre> <pre><code>/// &lt;summary&gt;\n/// Converts Sonic Riders' PVRT texture format to DDS using the game's built-in converter.\n/// &lt;/summary&gt;\npublic class PvrtConverterService : ISingletonService\n{\n    /// &lt;summary&gt;\n    /// Converts a texture to DDS.\n    /// &lt;/summary&gt;\n    /// &lt;param name=\"pvrtData\"&gt;The PVRT texture to convert.&lt;/param&gt;\n    /// &lt;returns&gt;DDS data generated from PVRT.&lt;/returns&gt;\n    public unsafe byte[] Convert(Span&lt;byte&gt; pvrtData);\n}\n</code></pre>"},{"location":"BookOfTheTweakbox/introduction/#controllers-icontroller","title":"Controllers (IController)","text":"<p>Info</p> <p>Controllers contain all the functionality that modifies directly how the game itself functions. These controllers usually 'hook' into the game code, by either replacing the method or injecting some assembly code.  </p> <p>Random Example(s):  </p> Controller Description MusicInjectionController Replaces the music track(s) that will be loaded by the game. IgnoreTurbulenceController The 'C toggle' for ignoring turbulence if desired. BorderlessWindowedController Toggles the game's Borderless Windowed state during startup and in real time. RailController Controls the speed of the Rails. AutoSectionController Automates Left+Right inputs during automated sections. <p>Within controllers there exists one special case, <code>EventController</code>. This controller is implemented mainly in x86 assembly, split over multiple files and provides callbacks which you can subscribe to that modify various game behaviours.  </p> <p>For example: <pre><code>EventController.SetRingsOnHit += SetRingsOnHit;\nprivate void SetRingsOnHit(Player* player) =&gt; player-&gt;Rings = 42;\n</code></pre></p>"},{"location":"BookOfTheTweakbox/introduction/#menus-icomponent","title":"Menus (IComponent)","text":"<p>Info</p> <p>Menus use the <code>IComponent</code> interface and are created + registered during Tweakbox startup. </p> <p>Random Example(s):  </p> Controller Description AboutMenu Renders the about page. TweakboxSettings Renders the Tweakbox general settings menu. SlipstreamDebug Shows slipstream data in real time."},{"location":"BookOfTheTweakbox/introduction/#creating-menus","title":"Creating Menus","text":"<p>In practice, all menus inherit from <code>ComponentBase</code> or <code>ComponentBase&lt;TConfig&gt;</code>, which provide a default implementation of <code>IComponent</code>.  </p> <p>Sample dummy menu (via <code>ComponentBase</code>):  <pre><code>// Renders \npublic class DummyMenu : ComponentBase\n{\n    public override string Name { get; set; } = \"Dummy Menu\";\n    public override void Render()\n    {\n        if (ImGui.Begin(Name, ref IsEnabled(), 0))\n        {\n            // Code to render menu here\n\n        }\n\n        ImGui.End();\n    }\n}\n</code></pre></p> <p>If you need to have a config for this menu, use <code>ComponentBase&lt;TConfig&gt;</code>. </p> <pre><code>// InfoEditorConfig is an IConfiguration\npublic class InfoEditor : ComponentBase&lt;InfoEditorConfig&gt;, IComponent\n{\n    public override string Name { get; set; } = \"Info Editor\";\n\n    // Note the constructor, it passes some stuff to base class.\n    public InfoEditor(IO io) : base(io, io.InfoConfigFolder, io.GetInfoConfigFiles, \".json\") { }\n\n    public override void Render()\n    {\n        if (ImGui.Begin(Name, ref IsEnabled(), 0))\n        {\n            // Provides the New/Delete/Load/Save part of the menu.\n            ProfileSelector.Render();\n\n            // Code to render menu here\n        }\n\n        ImGui.End();\n    }\n}\n</code></pre>"},{"location":"BookOfTheTweakbox/introduction/#registering-menus","title":"Registering Menus","text":"<p>Info</p> <p>Custom Menus must be registered in <code>Tweakbox.cs</code> to show in the overlay.  </p> <p>Example: <pre><code>new MenuBarItem(\"Main\", new List&lt;IComponent&gt;()\n{\n    // Your custom menu here.\n    Benchmark(() =&gt; IoC.GetSingleton&lt;DummyMenu&gt;(), nameof(DummyMenu)), \n\n    // Previously existing menus.\n    Benchmark(() =&gt; IoC.GetSingleton&lt;NetplayMenu&gt;(), nameof(NetplayMenu)),\n    Benchmark(() =&gt; IoC.GetSingleton&lt;UserGuideWindow&gt;(), nameof(UserGuideWindow)),\n    Benchmark(() =&gt; IoC.GetSingleton&lt;AboutMenu&gt;(), nameof(AboutMenu)),\n    Benchmark(() =&gt; IoC.GetSingleton&lt;OpenSourceLibraries&gt;(), nameof(OpenSourceLibraries)),\n})\n</code></pre></p>"},{"location":"BookOfTheTweakbox/introduction/#projects","title":"Projects","text":"<p>Info</p> <p>Provides a listing of projects within the Tweakbox source code.  </p> Project Description Riders.Netplay.Messages Contains all code responsible for writing/reading individual messages over the network. Riders.Netplay.Messages.Tests Test code for messages library; can be barebones at times. Riders.Tweakbox.API.SDK Code for communicating with the Web Server providing server browser, ranking. Riders.Tweakbox Main mod code. Riders.Tweakbox.CharacterPack.DX Test/example mod for adding custom character behaviours. [Ports SRDX 1.0.1 char stats to Tweakbox] Riders.Tweakbox.Gearpack Test/example mod for adding custom gear behaviours. [Ports all gears from all mods released before late 2021] Riders.Tweakbox.Interfaces API for other mods to use. Recommend Reading: Dependency Injection in Reloaded-II Sewer56.Hooks.Utilities Helper code for manipulating game functions with x86 assembly. Sewer56.Imgui Helpers for creating menus. (Extensions for our Dear ImGui wrapper.) Sewer56.SonicRiders API and definitions for hacking Sonic Riders <p>[Some projects have been omitted to keep the list simpler.]</p>"},{"location":"BookOfTheTweakbox/overlay-helpers/","title":"Overlay Helpers","text":"<p>Info</p> <p>Provides a small listing of helpful classes that may be used for creating UI elements.  </p>"},{"location":"BookOfTheTweakbox/overlay-helpers/#controls","title":"Controls","text":"<p>Info</p> <p>Contains all custom controls made for the Reloaded UI.</p>"},{"location":"BookOfTheTweakbox/overlay-helpers/#tooltips","title":"Tooltips","text":"<p>About</p> <p>The <code>Tooltip</code> class can be used to display tooltips on individual UI elements. </p> <p></p> <p>(Using <code>Tooltip.TextOnHover</code> to display tooltip on last rendered UI element)</p>"},{"location":"BookOfTheTweakbox/overlay-helpers/#textinputdata","title":"TextInputData","text":"<p>About</p> <p>Allocates memory to use in controls that allow the user to manipulate text.  </p> <pre><code>var username = new TextInputData(\"\", TextLength);\n\n// Calling 'Render' will give you a textbox.\nusername.Render(\"Username\");\n</code></pre> <p>The <code>Render</code> method is just for convenience since <code>TextBox</code> (InputText) is the most common control. You could use <code>username.Pointer</code> with other text based controls as needed.  </p>"},{"location":"BookOfTheTweakbox/overlay-helpers/#profileselector","title":"ProfileSelector","text":"<p>About</p> <p>Standalone widget for loading configuration files.  </p> <p></p>"},{"location":"BookOfTheTweakbox/overlay-helpers/#reflection","title":"Reflection","text":"<p>Info</p> <p>Wrapper over some parts of the original API for easier drawing of UI elements. Could maybe use better name.</p> <pre><code>// Make a control to edit an integer with a parameter\nReflection.MakeControl(ref bufferSize, \"Default Buffer Size\");\n</code></pre> <p>This is defined as: <pre><code>// Internal Definition\npublic static bool MakeControl(ref Int32 value, string name)\n{\n    return ImGui.DragScalar(name, (int)ImGuiDataType.ImGuiDataTypeS32, (IntPtr) Unsafe.AsPointer(ref value), 1.0F, IntPtr.Zero, IntPtr.Zero, null, 1);\n}\n</code></pre></p>"},{"location":"BookOfTheTweakbox/overlay-helpers/#imagerenderer","title":"ImageRenderer","text":"<p>About</p> <p>You can use this to render native DirectX textures inside the UI.  </p> <p>Example usage:  </p> <pre><code>imageRenderer = new ImageRenderer();\n\n// TextureOut is `LPDIRECT3DTEXTURE9 *ppTexture` as seen in e.g. `D3DXCreateTextureFrom` APIs.\nvar texturePtr = (IntPtr)(*currentImage.TextureOut);\nvar texture = new Texture(texturePtr);\nvar desc = texture.GetLevelDescription(0);\nimageRenderer.SetImageSize(new Vector2(desc.Width, desc.Height));\nimageRenderer.Render(texturePtr);\n</code></pre> <p></p>"},{"location":"BookOfTheTweakbox/overlay-helpers/#hyperlinks","title":"Hyperlinks","text":"<p>About</p> <p>Clickable piece of text that opens a link or file.  </p> <p>Todo</p> <p>Hyperlinks could be improved (change colour on hover, change mouse cursor) etc.</p> <p>Use the <code>Hyperlink.CreateText</code> API.  </p> <p></p>"},{"location":"BookOfTheTweakbox/overlay-helpers/#layout","title":"Layout","text":"<p>Info</p> <p>Contains helper classes related to setting up the layout of the windows and/or contents.  </p> <p>WIP</p>"},{"location":"BookOfTheTweakbox/overlay-helpers/#miscellaneous","title":"Miscellaneous","text":""},{"location":"BookOfTheTweakbox/overlay-helpers/#finalized","title":"Finalized  <p>Note</p> <p>This API will probably be removed.  </p>  <p>In the past our Dear ImGui Wrapper which is made using CppSharp didn't have finalizers, which meant not using a <code>using</code> statement or <code>Dispose()</code> may have led to memory leaks. This is no longer the case so this class no longer has any use.  </p>","text":""},{"location":"Changelogs/0.3.1/0.3.1/","title":"Changelog","text":"<p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"Changelogs/0.3.1/0.3.1/#early-access-notice","title":"Early Access Notice","text":"<p>Please note that this project is not yet ready for public consumption. Netplay is still incomplete, buggy and a work in progress. I do not yet consider this project acceptable for normal end users. </p> <p>Please report any issues (especially crashes) using the guidelines provided in Reporting Issues.</p> <p>Do not ask for Tech Support (e.g. \"How do I use this mod\").</p>"},{"location":"Changelogs/0.3.1/0.3.1/#031-2021-02-26","title":"0.3.1 - 2021-02-26","text":""},{"location":"Changelogs/0.3.1/0.3.1/#commits","title":"Commits","text":"<ul> <li>Added: Changelog for 0.3.0 <code>14ecbd6</code></li> <li>Changed: Make Netplay Descriptions more User Friendly <code>7bccddb</code></li> <li>Changed: Added Documentation and Updated to 0.3.1 <code>210b3be</code></li> <li>Added: Github Pages Task <code>2df92ce</code></li> <li>Fixed: AppVeyor not cloning submodules. <code>5e1cebd</code></li> <li>Changed: Move releases to Github Releases <code>f05ac5d</code></li> </ul>"},{"location":"Changelogs/0.4.0/0.4.0/","title":"Changelog","text":"<p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"Changelogs/0.4.0/0.4.0/#early-access-notice","title":"Early Access Notice","text":"<p>Please note that this project is not yet ready for public consumption. Netplay is still incomplete, buggy and a work in progress. I do not yet consider this project acceptable for normal end users. </p> <p>Please report any issues (especially crashes) using the guidelines provided in Reporting Issues.</p> <p>Do not ask for Tech Support (e.g. \"How do I use this mod\").</p>"},{"location":"Changelogs/0.4.0/0.4.0/#040-2021-03-03","title":"0.4.0 - 2021-03-03","text":""},{"location":"Changelogs/0.4.0/0.4.0/#commits","title":"Commits","text":""},{"location":"Changelogs/0.4.0/0.4.0/#fixed","title":"Fixed","text":"<ul> <li>Fixed: Ensure dotnet build removes any previous published builds. <code>c45a435</code></li> <li>Fixed: Course select now sets stage on menu exit. <code>de66326</code></li> <li>Fixed: Don't allow Modals (popups) at same level. Display one by one. <code>4f2fb13</code></li> <li>Fixed: Possible crashes in RNG sync when only other player disconnects. <code>89c5711</code></li> <li>Fixed: Character Selection not Synced under High Latency <code>291a56d</code></li> <li>Fixed: Single Player Character Models crash in Heroes Story Mode <code>07fae38</code></li> </ul>"},{"location":"Changelogs/0.4.0/0.4.0/#changed","title":"Changed","text":"<ul> <li>Changed: Make Tweaks Editor a bit more User Friendly <code>7b25adb</code></li> <li>Changed: Do not use RunPlayerPhysicsSimulation. Causes crashes. <code>44eaddd</code></li> <li>Changed: Borrow device from GraphicsController in FramePacingController <code>b1a11b4</code></li> <li>Changed: Set custom disconnection timeout. <code>03cc5dc</code></li> <li>Changed: Display unexplained disconnections to user. <code>64d159f</code></li> <li>Changed: Separate out Menu &amp; Shell Rendering <code>0e98422</code></li> <li>Changed: Combined Adaptive Jitter Buffer into Single Class <code>13edec7</code></li> </ul>"},{"location":"Changelogs/0.4.0/0.4.0/#optimized","title":"Optimized","text":"<ul> <li>Optimized: Remove only peers who didn't report ready in RNG sync <code>f012235</code></li> <li>Optimized: Reduce delay time before race is started using probability. <code>3985c01</code></li> <li>Optimized: Make Time Deltas More Accurate <code>09e4921</code></li> <li>Log: Make LogItem a struct to reduce heap allocations. <code>51e0730</code></li> </ul>"},{"location":"Changelogs/0.4.0/0.4.0/#added","title":"Added","text":"<ul> <li>Added: Prerequisites Section to Installation Page <code>f38833c</code></li> <li>Added: [Debug] Make Bad Internet Simulation Adjustable on the Fly <code>e512cce</code></li> <li>Added: Experiment for measuring jitter in jitter buffer. <code>7592027</code></li> <li>Added: Adaptive Jitter Buffer <code>7b52367</code></li> <li>Added: Low Latency \"Adaptive\" Jitter Buffer <code>0539d1b</code></li> <li>Added: Code that would allow for changing buffers in the future. <code>09ce4e0</code></li> <li>Added: Fast Increment Adaptive Buffer <code>c641028</code></li> <li>Added: Hybrid Jitter Buffer <code>b24e6e9</code></li> <li>Added: Jitter Buffer Options to Player Settings <code>dbf4f27</code></li> <li>Added: Tooltips to the various buffer settings. <code>816e8b7</code></li> <li>Added: Additional notes to \"Installation\". <code>539f4cc</code></li> <li>Added: Updated DearImguiSharp &amp; Added First Time Welcome Screen <code>f9bed60</code></li> <li>Added: Disconnect Reasons for Clients <code>57023a0</code></li> <li>Feature: Automatic Crash Dump Creation <code>e2cf282</code></li> <li>Added: Clone method for BitPackedArrays <code>efeed89</code></li> <li>Added: Small amounts of error handling throughout Netplay code. <code>7557505</code></li> <li>Added: Logs can now log separately to UI and Console <code>ba30ac0</code></li> <li>Feature: Notify user on injection of incompatible DLL. <code>5522c04</code></li> <li>Feature: Try Blocking DLL injection for DLLs that cause issues. <code>42a1f2d</code></li> <li>Feature: Lie about successful DLL injection for blocked DLLs. <code>9888927</code></li> </ul>"},{"location":"Changelogs/0.4.0/0.4.0/#removed","title":"Removed","text":"<ul> <li>Removed: Dead code from unused global config file. <code>75c16d5</code></li> </ul>"},{"location":"Changelogs/0.5.0/0.5.0/","title":"Changelog","text":"<p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p> <p>This document lists all changes </p>"},{"location":"Changelogs/0.5.0/0.5.0/#release-description-050","title":"Release Description (0.5.0)","text":"<p>This is a beta release. It's huge, probably the biggest update since initial test builds but a beta version nonetheless.</p> <p>Some of the features of this release are not fully tested; as I am unfortunately stressed, lacking in time and with real life things to sort out.</p> <p>I'm willing to make some time to fix minor bugs but don't expect major development soon.</p>"},{"location":"Changelogs/0.5.0/0.5.0/#early-access-notice","title":"Early Access Notice","text":"<p>Please note that this project is not yet ready for public consumption.  Netplay still has flaws. Very minor issues, but flaws nonetheless.  I do not yet consider this project to be of production quality. </p> <p>Please report any issues (especially crashes) using the guidelines provided in Reporting Issues.</p> <p>Do not ask for Tech Support (e.g. \"How do I use this mod\").</p>"},{"location":"Changelogs/0.5.0/0.5.0/#features","title":"Features","text":""},{"location":"Changelogs/0.5.0/0.5.0/#graphics-improvements","title":"Graphics Improvements","text":"<p>Tweakbox 0.5.0 comes with many improvements with regards to how graphics and rendering are handled within the game.  </p> <p>To name a few changes:</p> <ul> <li>You can now change resolution in real time.  </li> <li>You can now go to full-screen without restarting the game.  </li> <li>The game can now instantly be minimized and maximized from/to full-screen.  </li> <li>The graphics menu has been simplified and made easier to use.  </li> <li>The game window no longer resets itself to the corner after a User Account Control (UAC) prompt is shown.  </li> <li>The game now fully supports Direct3D9Ex; and all its benefits.  </li> </ul> <p> </p>"},{"location":"Changelogs/0.5.0/0.5.0/#breaking-limits","title":"Breaking Limits","text":"<p>Version 0.5.0 extends many of the built-in game limits to better accomodate modern hardware and mods of the future.</p> <p>Examples include:</p> <ul> <li>The game can now load up to 768MB of assets at any given time. (from 50MB)*  </li> <li>The game can now execute 40960 tasks (objects, effects etc.) in total. (from 1024)  </li> <li>Stages can now have a maximum of 8192 collision objects. (from 600)  </li> </ul> <p>* This limit is further extended to 2GB is a patch known as 'Large Address Aware' is applied to the game's exe file. In 0.5.0, this limit was set at startup. In 0.5.4+, this limit is configurable and accessible via <code>Tweakbox Settings -&gt; Startup</code>.</p>"},{"location":"Changelogs/0.5.0/0.5.0/#discord-rich-presence-support","title":"Discord Rich Presence Support","text":"<p>Tweakbox now ships with complete Discord information; including reporting both information about your current game status and your Netplay Session.</p> <p> </p> <p>And of course, Discord invites are supported too:</p> <p></p>"},{"location":"Changelogs/0.5.0/0.5.0/#server-browser","title":"Server Browser","text":"<p>You can now more easily find games hosted by other people by using the built-in server browser.</p> <p></p> <p>(This is just some test data)</p> <p>The Server Browser is powered by a home made, in house built web server which was made specifically for Riders.Tweakbox. There will be more features in the future such as Ranked Play, Elo-like Match Making Rating and Statistics Tracking. Those are already implemented server side.</p>"},{"location":"Changelogs/0.5.0/0.5.0/#netplay-modifiers","title":"Netplay Modifiers","text":"<p>Support for various \"Modifiers\", or ways in which you can customize your own Netplay lobby have been added. For now, the features are limited but extended features will come in the future.</p> <p></p> <p>Turbulence everywhere... even in running mode.</p>"},{"location":"Changelogs/0.5.0/0.5.0/#music-injection","title":"Music Injection","text":"<p>Tweakbox now allows you to add custom ADX music to the game by creating external Reloaded-II mods. This allows you to provide alternative tracks to the game's default soundtrack.</p> <p>When the game is about to play a music track, Tweakbox will randomly choose from one of your own music tracks.</p> <p></p> <p>Tweakbox allows you to replace music using two modes:</p> <ul> <li>Per Stage  </li> <li>Per File  </li> </ul> <p>The example above shows per-stage music injection.</p> <p>There is no limit to this feature. If you want 20GB worth of 4000 music tracks or 500 music tracks for a single stage, be my guest. For more details, refer to Tweakbox' documentation.</p>"},{"location":"Changelogs/0.5.0/0.5.0/#texture-injection","title":"Texture Injection","text":"<p>Tweakbox now allows you to replace textures in real-time by hijacking function calls to the Direct3D 9 API. Similar to how Dolphin Emulator handles it, you can inject textures without the need to modify game files.</p> <p></p> <p>Textures are supported in the following formats:</p> <ul> <li>PNG  </li> <li>DDS  </li> <li>DDS.LZ4 (Custom)  </li> </ul> <p>Creation of texture packs is easy, with a step by step guide available in the documentation.</p>"},{"location":"Changelogs/0.5.0/0.5.0/#animated-texture-injection","title":"Animated Texture Injection","text":"<p>If you desire a bit more style, and wish to flex on the people emulating the GameCube version of the game, Tweakbox allows you to add basic animation to any texture:</p> <p></p> <p></p> <p>For more details, refer to Tweakbox' documentation.</p>"},{"location":"Changelogs/0.5.0/0.5.0/#texture-dumping","title":"Texture Dumping","text":"<p>You can also dump textures from the game as they are loaded in real-time.</p> <p></p> <p>The texture dump tool comes with multiple modes; such as:</p> <ul> <li><code>Only New</code> mode which doesn't dump textures already dumped.</li> <li><code>Deduplication</code> mode, which puts textures with more than X duplicates in a <code>Common</code> folder.</li> </ul> <p>Chances are that you wouldn't need to texture dump yourself though; as I've gone through the effort of dumping 3000+ textures on my own, with perfect dumps for every single stage.</p> <p>With the improved texture dumping tools and some clever usage of them, the texture archive I made in the span of a day is more complete and accurate than what's been available for the GameCube version over the last 2 years.</p> <p>Here's a link to my texture archive, it contains ~99% of all of the game's textures.</p>"},{"location":"Changelogs/0.5.0/0.5.0/#texture-cache","title":"Texture Cache","text":"<p>Starting with 0.5.5+ Tweakbox also maintains a built-in texture cache to work around slow loading times of PNG textures. </p> <p>When a PNG is loaded for the first time and its mipmaps are generated, the texture will be converted to the optimal <code>DDS.LZ4</code> custom format for future use. Subsequent uses of the texture will instead load from the cache which is many magnitudes faster. The conversion happens in the background and is multithreaded, so you should not notice a difference in first time load performance compared to previously loading a PNG (&lt; 0.5.5).</p> <p>Editing the original PNG image will cause the cached texture for that file to be invalidated, and a new <code>DDS.LZ4</code> will be automatically created. Please note that the underlying cached DDS is uncompresed and eats memory for breakfast. Consider manually creating DDSes with DXT1 / DXT5 if you are working with e.g. Animated Textures. More info in the documentation.</p>"},{"location":"Changelogs/0.5.0/0.5.0/#object-layout-editor","title":"Object Layout Editor","text":"<p>Tweakbox now has a built-in, fully featured object layout editor; allowing you to:</p> <ul> <li>Add objects  </li> <li>Remove objects  </li> <li>Transform objects (scale, rotate, move)  </li> <li>Change object properties.  </li> <li>Save &amp; Load Object Layouts.    </li> <li>Export object layout to GameCube/PS2/Xbox/PC. ... and much more</li> </ul> <p></p> <p>Oh, by the way, these itemboxes (and some others) are unused in the final game, hehehe. If you would like additional features, such as racing online with custom layouts, let me know.</p> <p>By the way... you can also now play Battle Mode in regular race stages hehehe...</p>"},{"location":"Changelogs/0.5.0/0.5.0/#end-of-race-synchronization-pause-menu","title":"End of Race Synchronization &amp; Pause Menu","text":"<p>The players now have their own individual pause menus, allowing you to restart and exit the race (if host) or disconnect from the current lobby.</p> <p></p> <p> </p> <p>The pause menu after the results screen has also been replaced with a custom menu allowing the host to choose what to do next.</p>"},{"location":"Changelogs/0.5.0/0.5.0/#version-other-sanity-checks","title":"Version &amp; Other Sanity Checks","text":"<p>In Netplay, Tweakbox will now make basic sanity checks such as:</p> <ul> <li>Ensuring that all clients are running the same version of Tweakbox.  </li> <li>Ensuring all clients are using the same Tweakbox extensions/plugins.  </li> <li>Ensuring all clients are running the same game mode.  </li> </ul> <p></p>"},{"location":"Changelogs/0.5.0/0.5.0/#turbulence-editing","title":"Turbulence Editing","text":"<p>Tweakbox now allows you to edit turbulence physics and speeds. For every single variation of Turbulence used by the game.</p> <p></p> <p>Of course, as with all features listed above and below, it syncs with host over Netplay.</p>"},{"location":"Changelogs/0.5.0/0.5.0/#object-behaviour-changing","title":"Object Behaviour Changing","text":"<p>Tweakbox can now change the behaviour of some common objects in the game; for example:</p> <ul> <li>Making dash panels give you additional speed to your current speed.  </li> <li>Making dash panels multiply your current speed.  </li> <li>Making dash panels give you a minimum amount of speed.  </li> </ul> <p></p>"},{"location":"Changelogs/0.5.0/0.5.0/#custom-deceleration-behaviour","title":"Custom Deceleration Behaviour","text":"<p>Tweakbox can now change how the game handles deceleration; overriding the game's built in exponential deceleration with alternative options.</p> <p>One of the options is <code>Linear</code> deceleration; which makes you decelerate at a constant rate regardless of how far above top speed you are.</p> <p>You can now spam your \"JCBCDPC\"dsdasdasfdsjdfuisdfhsid(s). </p> <p></p> <p>The numbers in this screenshot are actually what Sonic Riders DX and Sonic Riders TE 1.3 use.</p>"},{"location":"Changelogs/0.5.0/0.5.0/#boot-to-stage","title":"Boot to Stage","text":"<p>The mod now allows you to boot directly into a race (no menu navigation required) with a specific stage, character and gear combination. This is incredibly useful when testing mods.</p>"},{"location":"Changelogs/0.5.0/0.5.0/#return-to-track-select","title":"Return to Track Select","text":"<p>The mod now allows you to return directly into the track select menu after returning from a race. This works with all game modes, unlike the implementations in the current popular GameCube version mods.</p>"},{"location":"Changelogs/0.5.0/0.5.0/#miscellaneous","title":"Miscellaneous","text":"<ul> <li>Changed: Connecting to a game does not freeze the game window until a connection is established.  </li> <li>Renamed: <code>Various Tweaks</code> to <code>Tweakbox Settings</code>.  </li> <li>Updated: Readme &amp; Documentation Pages for all new and existing features.  </li> <li>Updated: Libraries used behind the hood.  </li> <li>Minor Performance Optimisations  </li> </ul> <p>... and more</p>"},{"location":"Changelogs/0.5.0/0.5.0/#fixes","title":"Fixes","text":"<ul> <li>Fixed: Having the same submenu open in the gear editor for multiple gears at once causes you to only be able to interact with the first one.  </li> <li>Fixed: Memory Leak in Boot To Menu</li> </ul> <p>... and more</p>"},{"location":"Changelogs/0.6.0/0.6.0/","title":"Changelog","text":"<p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p> <p>This document lists all changes </p>"},{"location":"Changelogs/0.6.0/0.6.0/#release-description-060","title":"Release Description (0.6.0)","text":"<p>This is a beta release.</p> <p>This release mostly consists of additional polish in existing features, albeit there are some new toys to play with (one of them is really impressive!).</p> <p>Most of the features in this release have been tested, though there may be some odd things here and there around the edges; as I've still other things to do outside of Riders.</p> <p>Please report bugs (no matter how minor); I'll do what I can to test them in a timely manner.</p>"},{"location":"Changelogs/0.6.0/0.6.0/#early-access-notice","title":"Early Access Notice","text":"<p>Please note that this project is not yet ready for public consumption.  Netplay still has flaws. Very minor issues, but flaws nonetheless.  I do not yet consider this project to be of production quality. </p> <p>Please report any issues (especially crashes) using the guidelines provided in Reporting Issues.</p> <p>Do not ask for Tech Support (e.g. \"How do I use this mod\").</p>"},{"location":"Changelogs/0.6.0/0.6.0/#features","title":"Features","text":""},{"location":"Changelogs/0.6.0/0.6.0/#custom-gear-support","title":"Custom Gear Support","text":"<p>The staple feature of this patch.</p> <p></p> <p>Tweakbox now supports the addition of fully custom gears; that is, having customized gears without having to replace the vanilla gears. </p> <p>Here's some details:</p> <ul> <li>Custom gears can be normally selected from Character Select; no magic buttons required.</li> <li>You can have up to 214 custom gears (255 gears total).</li> <li>Custom gears are Supported in Netplay (requires more testing).</li> <li>Custom gears can have custom icons and names in Character Select. </li> <li>Custom gears can be edited from within the built-in gear editor.</li> <li>You can export any gear from Gear Editor into a brand new custom gear.</li> </ul> <p>What's left? - Custom model support for custom gears. (Will implement on demand)</p>"},{"location":"Changelogs/0.6.0/0.6.0/#enhanced-texture-tools","title":"Enhanced Texture Tools","text":"<p>Some minor improvements have been made to existing texture injection tools used in Riders; for example the introduction of the texture viewer tool.</p> <p></p> <p>The texture viewer allows you to preview all currently loaded textures in real time; which makes the creation of texture packs or finding hashes for your custom textures more convenient.</p> <p>Oh, by the way, this is the debug menu font! It's not there in the console releases &lt;3.</p> <p></p> <p>It's also now possible reload textures in real time; allowing for changes to be seen without having to re-load the menu/stage; as well as see a list of all texture redirections that have been made. Useful stuff!</p>"},{"location":"Changelogs/0.6.0/0.6.0/#widget-support","title":"Widget Support","text":"<p>Tweakbox now has the ability to display various widgets on the screen.</p> <p>Widgets can be pinned to any edge or corner of the screen and display information such as, FPS, Frame Time, CPU and Memory Usage to the screen.</p> <p></p> <p>The user can add or remove as many widgets as they like.</p>"},{"location":"Changelogs/0.6.0/0.6.0/#cleaned-up-settings-menu","title":"Cleaned Up Settings Menu","text":"<p>The layout of the settings menu has been cleaned up for better organization and accessibility. Related settings are now grouped together under expandable trees.</p> <p></p>"},{"location":"Changelogs/0.6.0/0.6.0/#forced-netplay-settings","title":"Forced Netplay Settings","text":"<p>Version 0.6.0 adds a feature which forces certain settings to be enabled while in Netplay mode:</p> <ul> <li>Enable return to Stage Select from Race/Survival/Tag</li> <li>Enable driving backwards.</li> <li>Enable FPS cap.</li> </ul> <p>These features cannot be toggled while participating in Netplay; and are enabled to ensure consistency between all players.</p>"},{"location":"Changelogs/0.6.0/0.6.0/#chatbox-in-netplay","title":"Chatbox In Netplay","text":"<p>Come across a random player in Netplay?  Fear no more! You can talk now.</p> <p>*You even get notified if your Netplay window is minimized, win-win!.</p>"},{"location":"Changelogs/0.6.0/0.6.0/#enhanced-input-blocking","title":"Enhanced Input Blocking","text":"<p>A few small changes here: - You can customize the hotkey used to toggle passing input to the game. - Blocking input passed to the game now works regardless of mod load order when used with Controller Hook. - You can now make Tweakbox not pass inputs to game if any of its Windows are activated/being used.</p>"},{"location":"Changelogs/0.6.0/0.6.0/#improved-logging-efficiency","title":"Improved Logging Efficiency","text":"<p>Starting with version 0.6.0, Tweakbox uses an upcoming C# 10 feature called Improved Interpolated Strings which allows for more efficient logging. </p> <p>Notably, if the log level/category for a specific message is not enabled, the string will not even be constructed at all; saving both time and unnecessary memory allocations without the need of writing repetive, redundant ugly checks on every log operation. </p>"},{"location":"Changelogs/0.6.0/0.6.0/#heap-allocation-viewer","title":"Heap Allocation Viewer","text":"<p>Starting with version 0.6.0, there's a cool little utility for tracking allocations made to the game's native heap.</p> <p></p> <p>This is a result of my study into how the game handles memory allocations.</p> <p>Sometimes it doesn't seem to work perfectly yet for the <code>Front</code> side (if there's an issue, you'll experience game lag); as the front side of the heap wasn't really designed to be walked through, and game doesn't clean up properly sometimes. Most of the time however it works perfectly fine.</p> <p>The back side works perfectly without issue.</p>"},{"location":"Changelogs/0.6.0/0.6.0/#adding-game-modifiers","title":"Adding: \"Game Modifiers\"","text":"<p>The \"Race Settings\" in Netplay Menu has now been moved to the <code>Tweakbox Settings</code> menu and rebranded as <code>Game Modifiers</code>. </p> <p>These settings can now be applied to any race; not just netplay races.</p> <p></p> <p>In addition, a number of new modifiers have been added, including: - Disable Attacks for First <code>X</code> Milliseconds in Race. - No Screenpeeking (Netplay) - Custom Ring Loss on Death - Custom Ring Loss on Hit - No Turbulence - Slipstream  </p>"},{"location":"Changelogs/0.6.0/0.6.0/#improved-loading-times","title":"Improved Loading Times","text":"<p>Starting with version 0.6.0, race loading times have been improved by up to 60%. Previously loading an 8 player race has taken around 2.5 seconds, now it takes 1.5 seconds.</p>"},{"location":"Changelogs/0.6.0/0.6.0/#improved-startup-times","title":"Improved Startup Times","text":"<p>Tweakbox now obsoletes a third party file caching mechanism from CRI Middleware originally used in Riders. This improves the initial cold boot startup time by around 10 seconds.</p> <p>Note: <code>\"Cold Booting\"</code> refers to running the game after a PC restart or after some time has passed since last launch.</p>"},{"location":"Changelogs/0.6.0/0.6.0/#animated-texture-improvements","title":"Animated Texture Improvements","text":"<p>There's a collection of minor improvements related to animated textures:</p> <ul> <li>Texture Cache: Animated textures are now automatically packed into a single archive to improve performance.</li> </ul> <p>The archive consists of a list of raw DDS files compressed using lz4.  This significantly improves load times when many frames are used.</p> <ul> <li>Animated textures will now load in the background without stalling the game startup process.</li> </ul> <p>The game will now use the first frame of the animated texture until loading of the remaining frames is ready. This prevents stutters on loading animated textures outside of load screens (e.g. Character Select).</p> <ul> <li>Tweakbox will now warn when high frame count animated textures are using an unoptimal format.</li> </ul>"},{"location":"Changelogs/0.6.0/0.6.0/#layout-editor-improvements","title":"Layout Editor Improvements","text":"<p>The in-mod layout editor has received some minor improvements:</p> <ul> <li> <p>Safe Mode: Prevents updating object data in real time to ensure moving some objects (e.g. Rings) does not lead to crashes.</p> </li> <li> <p>Autosave: The layout editor will now create an automatic save of the at regular time intervals. Useful in case you encounter a crash.</p> </li> </ul> <p></p>"},{"location":"Changelogs/0.6.0/0.6.0/#in-game-language-change","title":"In-Game Language Change","text":"<p>The language of both the game's text and voice can now be changed on the fly. Some changes (e.g. menu voices) are applied in real time, however others (e.g. localized menu assets) only apply after the next loading screen. </p>"},{"location":"Changelogs/0.6.0/0.6.0/#improved-tweakbox-startup-times","title":"Improved Tweakbox Startup Times","text":"<p>Startup time of Tweakbox itself has been improved in verison 0.6.0, by approximately 75%. Startup now takes 0.7 seconds, instead of 1.2 seconds.</p>"},{"location":"Changelogs/0.6.0/0.6.0/#missing-model-fallback","title":"Missing Model Fallback","text":"<p>When a model for a specific gear is missing (e.g. Sonic + Riders DX Advantage F); Tweakbox will now default to loading the default gear model for that gear type.</p> <p>i.e. For boards it will load <code>Default Gear</code>, for skates it will load <code>Darkness</code> and for bikes it will load <code>E-Rider</code>.</p> <p>This should prevent Tweakbox from crashing when from gear data from the GameCube mods are imported to Tweakbox. (Since those have custom model archives.)</p>"},{"location":"Changelogs/0.6.0/0.6.0/#feature-auto-decompress-game-data","title":"Feature: Auto Decompress Game Data","text":"<p>Tweakbox will now automatically decompress all game files on boot if it detects that they have not been previously decompressed.</p>"},{"location":"Changelogs/0.6.0/0.6.0/#miscellaneous","title":"Miscellaneous","text":"<ul> <li>Added: About Screen</li> <li>Added: Toggle FPS Cap.</li> <li>C#10 Features (Logging Improvements, File Scoped Namespaces)</li> <li>Fixed: Workaround for CPU Usage monitoring not working for some users.</li> <li>Fixed: Bad link in GitHub repository for documentation.</li> <li>Fixed: Softlock in results screen on Netplay if host quits before client opens screen.</li> <li>Fixed: Bug causing the last frame of an animated texture to be skipped.</li> <li>Fixed: Tweakbox crashes under DXVK. (Might work on Linux now too)</li> <li>Fixed: Tweakbox no longer crashes on failing to connect to NAT Punching Server.</li> <li>Added: Tweakbox will now report unhandled errors/exceptions in the log.</li> <li>Added: An option to disable particles in case of performance issues.</li> <li>Added: Recommendation to use DXVK in the Graphics tab.</li> <li>Changed: Do not fast forward if game resets frame counter (e.g. after load screens).</li> <li>Improved: Texture decompression performance (by a tiny amount).</li> <li>Changed: Made frame pacing more aggressive (slightly increased CPU usage for better pacing).</li> <li>Changed: Made process high priority for frame pacing reasons.</li> </ul>"},{"location":"Preview/preview/","title":"About Preview Features","text":"<p>Preview features refer to currently \"work-in-progress\" features.</p> <p>These features are generally available in the current release but are not finalized and/or may have potential slight changes in the future.</p>"},{"location":"Preview/tweakbox-api/","title":"Tweakbox API","text":"<p>Starting with version 0.7.0, Tweakbox offers a built-in API which allows you to control Tweakbox functionality as well as perform certain other operations which affect the state of the game.</p>"},{"location":"Preview/tweakbox-api/#getting-started","title":"Getting Started","text":"<p>Setup usually takes around 2 minutes if you know what you're doing. If you're new to programming however, it might take you a while, be patient!</p>"},{"location":"Preview/tweakbox-api/#create-a-reloaded-ii-mod","title":"Create a Reloaded-II Mod.","text":"<p>Refer to the Reloaded-II wiki (\"Building Mods\") for guidance.</p>"},{"location":"Preview/tweakbox-api/#clone-this-repository","title":"Clone this repository.","text":"<pre><code>git clone --recursive https://github.com/Sewer56/Riders.Tweakbox.git\n</code></pre> <p>or add as git submodule</p> <pre><code>git submodule add https://github.com/Sewer56/Riders.Tweakbox.git\ngit submodule update --init --recursive\n</code></pre>"},{"location":"Preview/tweakbox-api/#add-riderstweakboxinterfaces-to-your-project","title":"Add Riders.Tweakbox.Interfaces to your project.","text":"<p>First add it to your solution by right clicking it. </p> <p>and find <code>Riders.Tweakbox.Interfaces.csproj</code> </p> <p>Then, add it as a project dependency to your Reloaded-II mod. </p> <p></p>"},{"location":"Preview/tweakbox-api/#add-riderstweakbox-as-a-reloaded-ii-dependency","title":"Add Riders.Tweakbox as a Reloaded II dependency.","text":"<p>Edit your project's <code>ModConfig.json</code> to include <code>Riders.Tweakbox</code> as part of the <code>ModDependencies</code>.</p> <p></p>"},{"location":"Preview/tweakbox-api/#consume-the-tweakbox-api","title":"Consume the Tweakbox API","text":"<p>In your <code>Start</code> function of the mod, grab an interface to the R-II.</p> <pre><code>// Get the API Controller\n_modLoader.GetController&lt;ITweakboxApi&gt;().TryGetTarget(out var apiAccessor);\n\n// Register to the tweakbox API\nvar api = apiAccessor.Register($\"{config.ModId}.{config.ModVersion}\");\n\n// Use the API\nvar gearApi = api.GetCustomGearApi();\ngearApi.RemoveVanillaGears();\n</code></pre>"},{"location":"Preview/tweakbox-api/#more-information","title":"More Information","text":"<p>Reloaded-II Documentation on Controllers</p>"},{"location":"Preview/tweakbox-api/#example-usage","title":"Example Usage","text":"<p>For more examples, consider looking at the example <code>Riders.Tweakbox.Gearpack</code> and <code>Riders.Tweakbox.CharacterPack.DX</code> projects contained in this repository. </p>"},{"location":"Preview/tweakbox-api/#get-updated-pointers","title":"Get Updated Pointers","text":"<p>Tweakbox rewrites some game code to make features such as custom gears possible. Therefore, some fields in libraries such as <code>Sewer56.SonicRiders</code> will need to be updated.</p> <p>To obtain the updated pointers, use the <code>GetPointers</code> method.</p> <pre><code>// Update Gear Data Pointer\nvar pointers = modImpl.GetPointers();\nSewer56.SonicRiders.API.Player.Gears = new FixedArrayPtr&lt;ExtremeGear&gt;((ulong)pointers.Gears.Address, pointers.Gears.NumItems);\n</code></pre>"},{"location":"Preview/tweakbox-api/#add-a-custom-gear-to-the-game","title":"Add a Custom Gear to the Game","text":"<pre><code>// ICustomGearApi obtained via api.GetCustomGearApi();\npublic class BlueStarIIDX : CustomGearBase, IExtremeGear\n{\n    private BoostProperties _boostProperties = new BoostProperties()\n    {\n        AddedBoostChainMultiplier = 0.15f,\n        AddedBoostDurationLv3 = 30\n    };\n\n    /// &lt;summary&gt;\n    /// Initializes this custom gear.\n    /// &lt;/summary&gt;\n    public override void Initialize(string gearsFolder, ICustomGearApi gearApi)\n    {\n        // Import a custom gear exported from the built-in `Export Custom Gear`\n        // function in the gear editor.\n        var data = gearApi.ImportFromFolder(Path.Combine(gearsFolder, \"BlueStarII DX\"));\n\n        // Attach a class that overrides gear behaviours (via IExtremeGear)\n        data.Behaviour = this;\n\n        // Add the custom gear to the game!\n        gearApi.AddGear(data);\n    }\n\n    // IExtremeGear API Callback\n    public BoostProperties GetBoostProperties() =&gt; _boostProperties;\n}\n</code></pre> <p>If you need to get the location of your mod's folder...</p> <pre><code>// In your mod's `Start` method.\n_modLoader.GetDirectoryForModId(MyModId)\n</code></pre>"},{"location":"Preview/tweakbox-api/#modify-character-behaviour-simple","title":"Modify Character Behaviour (Simple)","text":"<pre><code>public class Sonic : LateBoosterCharacter, ICustomStats\n{\n    private BoostProperties _boostProperties = new BoostProperties()\n    {\n        AddedBoostDurationLv2 = 60,\n        AddedBoostDurationLv3 = 60,\n    };\n\n    /// &lt;summary&gt;\n    /// Initializes this custom character.\n    /// &lt;/summary&gt;\n    public void Initialize(Interfaces.ICustomCharacterApi characterApi)\n    {\n        Request = new ModifyCharacterRequest()\n        {\n            Behaviour = this, // Modifies the character behaviour.\n            CharacterId = (int) Characters.Sonic, // Character Index. See Sewer56.SonicRiders.Structures.Enums.Characters\n            CharacterName = \"Sonic DX\",\n            Stack = false                  // Does not combine with other mods.\n        };\n\n        // Modify your character!\n        characterApi.AddCharacterBehaviour(Request);\n    }\n\n    // Overrides for ICustomCharacter interface.\n    public ApiCharacterParameters GetCharacterParameters() =&gt; new ApiCharacterParameters()\n    {\n        SpeedMultiplierOffset = 0f\n    };\n\n    public BoostProperties GetBoostProperties() =&gt; _boostProperties;\n}\n</code></pre> <p>Usage: <pre><code>// Get API\nvar characterApi = api.GetCustomCharacterApi();\n\n// Add character\nvar sonic = new Sonic();\nsonic.Initialize(characterApi);\n</code></pre></p>"},{"location":"Preview/tweakbox-api/#modify-character-behaviour-clean","title":"Modify Character Behaviour (Clean)","text":"<p>Here's an example of how you could implement character 'archetypes'/'classes' (categories) for a cleaner approach. </p> <p>Base Character Class: <pre><code>public abstract class CustomCharacterBase : ICustomCharacter\n{\n    public ModifyCharacterRequest Request { get; private set; }\n    public abstract string Name { get; }\n    public abstract Characters Character { get; }\n\n    /// &lt;summary&gt;\n    /// Initializes this custom character.\n    /// &lt;/summary&gt;\n    public void Initialize(Interfaces.ICustomCharacterApi characterApi)\n    {\n        Request = new ModifyCharacterRequest()\n        {\n            Behaviour = this,              // Modifies the character behaviour.\n            CharacterId = (int) Character, // Character Index. See Sewer56.SonicRiders.Structures.Enums.Characters\n            CharacterName = Name,\n            Stack = false                  // Does not combine with other mods.\n        };\n\n        // Modify your character!\n        characterApi.AddCharacterBehaviour(Request);\n    }\n}\n</code></pre></p> <p>Define the character class: <pre><code>// An implementation of Sonic Riders DX 1.0.0 Late Booster Character\npublic abstract class LateBoosterCharacter : CustomCharacterBase, ICustomCharacter\n{\n    // These are all callbacks for the ICustomCharacter interface.\n    private BoostProperties _boostProperties = new BoostProperties()\n    {\n        AddedBoostDurationLv2 = 60,\n        AddedBoostDurationLv3 = 60,\n    };\n\n    public ApiCharacterParameters GetCharacterParameters() =&gt; new ApiCharacterParameters()\n    {\n        SpeedMultiplierOffset = 0f\n    };\n\n    public BoostProperties GetBoostProperties() =&gt; _boostProperties;\n}\n</code></pre></p> <p>Give the character that class (via inheritance): <pre><code>public class Sonic : LateBoosterCharacter, ICustomStats\n{\n    public override string Name { get; } = \"Sonic DX\";\n    public override Characters Character { get; } = Characters.Sonic;\n}\n</code></pre></p>"}]}