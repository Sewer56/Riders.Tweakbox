using System;
using Riders.Netplay.Messages.Helpers;
using Sewer56.BitStream;
using Sewer56.BitStream.Interfaces;
using Sewer56.SonicRiders.Structures.Enums;

namespace Riders.Netplay.Messages.Reliable.Structs.Menu
{
    public struct CourseSelectSetStage : IReliableMessage, IEquatable<CourseSelectSetStage>
    {
        /// <summary>
        /// The stage ID associated with this structure.
        /// </summary>
        public byte StageId;

        public CourseSelectSetStage(byte stageId) => StageId = stageId;

        /// <inheritdoc />
        public void Dispose() { }

        /// <inheritdoc />
        public readonly MessageType GetMessageType() => MessageType.CourseSelectSetStage;

        /// <inheritdoc />
        public void ToStream<TByteStream>(ref BitStream<TByteStream> bitStream) where TByteStream : IByteStream => bitStream.Write(StageId, EnumNumBits<Levels>.Number);

        /// <inheritdoc />
        public void FromStream<TByteStream>(ref BitStream<TByteStream> bitStream) where TByteStream : IByteStream => StageId = bitStream.Read<byte>(EnumNumBits<Levels>.Number);

        #region Autogenerated by R#
        public bool Equals(CourseSelectSetStage other) => StageId == other.StageId;
        public override bool Equals(object obj) => obj is CourseSelectSetStage other && Equals(other);
        public override int GetHashCode() => StageId.GetHashCode();
        #endregion
    }
}