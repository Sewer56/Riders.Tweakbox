using System;
using Sewer56.BitStream;
using Sewer56.BitStream.Interfaces;

namespace Riders.Netplay.Messages.Reliable.Structs.Gameplay.Struct;

/// <summary>
/// Informs other player when a player has exited an air pit.
/// </summary>
public struct PitExit : Misc.Interfaces.IBitPackable<PitExit>, IEquatable<PitExit>
{
    /// <summary>
    /// If true, player will exit pit.
    /// </summary>
    public bool Exit;

    public PitExit(bool exit) => Exit = exit;

    public PitExit FromStream<T>(ref BitStream<T> stream) where T : IByteStream => new PitExit(Convert.ToBoolean(stream.ReadBit()));

    public void ToStream<T>(ref BitStream<T> stream) where T : IByteStream => stream.WriteBit(Convert.ToByte(Exit));

    // Generated by R#

    public bool Equals(PitExit other) => Exit == other.Exit;

    public override bool Equals(object obj) => obj is PitExit other && Equals(other);

    public override int GetHashCode() => Exit.GetHashCode();
}