using System;
using BitStreams;
using Riders.Netplay.Messages.Misc;
using Riders.Netplay.Messages.Misc.Interfaces;

namespace Riders.Netplay.Messages.Reliable.Structs.Gameplay
{
    /// <summary>
    /// Informs the host of an individual attack.
    /// </summary>
    public struct SetAttack : IBitPackable<SetAttack>, IEquatable<SetAttack>
    {
        public const int SizeOfEntryBits = 4;

        /// <summary>
        /// True if a value is set, else false.
        /// </summary>
        public bool IsValid;

        /// <summary>
        /// The target player to be attacked (Range 0-7).
        /// Set -1 if none.
        /// </summary>
        public byte Target;

        public SetAttack(byte target)
        {
            IsValid = true;
            Target = target;
        }

        public SetAttack(bool isValid, byte target)
        {
            IsValid = isValid;
            Target = target;
        }

        /// <inheritdoc />
        public int GetSizeOfEntry() => SizeOfEntryBits;

        /// <inheritdoc />
        public SetAttack FromStream(BitStream stream)
        {
            var data = stream.ReadByte(SizeOfEntryBits);
            bool valid = (data & 1) == 1;
            var target = (byte)(data >> 1);
            return new SetAttack(valid, target);
        }

        /// <inheritdoc />
        public void ToStream(BitStream stream)
        {
            var valid = IsValid ? 1 : 0;
            var targetShift = (Target << 1);
            var value = (byte)(targetShift | valid);
            stream.Write(value, SizeOfEntryBits);
        }

        #region Autogenerated by R#
        /// <inheritdoc />
        public bool Equals(SetAttack other)
        {
            return IsValid == other.IsValid && Target == other.Target;
        }

        /// <inheritdoc />
        public override bool Equals(object obj)
        {
            return obj is SetAttack other && Equals(other);
        }

        /// <inheritdoc />
        public override int GetHashCode()
        {
            return HashCode.Combine(IsValid, Target);
        }
        #endregion
    }
}