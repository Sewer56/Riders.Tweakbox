using System;
using Sewer56.BitStream;
using Sewer56.BitStream.Interfaces;

namespace Riders.Netplay.Messages.Reliable.Structs.Gameplay
{
    public struct LapCounter : Misc.Interfaces.IBitPackable<LapCounter>, IEquatable<LapCounter>
    {
        public const int SizeOfEntryBits = 7;

        /// <summary>
        /// The current value of the lap.
        /// </summary>
        public byte Counter;

        public LapCounter(byte counter) => Counter = counter;

        /// <inheritdoc />
        public int GetSizeOfEntry() => SizeOfEntryBits;

        /// <inheritdoc />
        public LapCounter FromStream<T>(ref BitStream<T> stream) where T : IByteStream => new LapCounter() { Counter = stream.Read<byte>() };

        /// <inheritdoc />
        public void ToStream<T>(ref BitStream<T> stream) where T : IByteStream => stream.Write(Counter, SizeOfEntryBits);

        #region Autogenerated by R#
        /// <inheritdoc />
        public override bool Equals(object obj) => obj is LapCounter other && Equals(other);

        /// <inheritdoc />
        public override int GetHashCode() => Counter.GetHashCode();
        public bool Equals(LapCounter other) => Counter == other.Counter;
        #endregion
    }
}
