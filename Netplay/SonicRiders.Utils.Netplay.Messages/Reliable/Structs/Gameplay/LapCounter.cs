using System;
using System.Diagnostics.CodeAnalysis;
using BitStreams;
using Riders.Netplay.Messages.Misc.Interfaces;

namespace Riders.Netplay.Messages.Reliable.Structs.Gameplay
{
    public struct LapCounter : IBitPackable<LapCounter>, IEquatable<LapCounter>
    {
        public const int SizeOfEntryBits = 7;

        /// <summary>
        /// The current value of the lap.
        /// </summary>
        public byte Counter;

        public LapCounter(byte counter) => Counter = counter;

        /// <inheritdoc />
        public int GetSizeOfEntry() => SizeOfEntryBits;

        /// <inheritdoc />
        public LapCounter FromStream(BitStream stream)
        {
            var counter = stream.ReadByte(SizeOfEntryBits);
            return new LapCounter() { Counter = counter };
        }

        /// <inheritdoc />
        public void ToStream(BitStream stream) => stream.WriteByte(Counter, SizeOfEntryBits);

        #region Autogenerated by R#
        /// <inheritdoc />
        public override bool Equals(object obj) => obj is LapCounter other && Equals(other);

        /// <inheritdoc />
        public override int GetHashCode() => Counter.GetHashCode();
        public bool Equals(LapCounter other) => Counter == other.Counter;
        #endregion
    }
}
