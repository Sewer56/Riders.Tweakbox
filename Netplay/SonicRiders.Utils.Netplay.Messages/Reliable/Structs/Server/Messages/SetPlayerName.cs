using System;
using MessagePack;
using Reloaded.Memory.Streams;
using Riders.Netplay.Messages.Reliable.Structs.Server.Shared;

namespace Riders.Netplay.Messages.Reliable.Structs.Server.Messages
{
    [MessagePackObject()]
    public class SetPlayerName : IServerMessage, IEquatable<SetPlayerName>
    {
        public ServerMessageType GetMessageType() => ServerMessageType.ClientSetPlayerName;

        [Key(0)]
        public string Name { get; set; }

        public byte[] ToBytes() => MessagePackSerializer.Serialize(this);
        public static SetPlayerName FromBytes(BufferedStreamReader reader) => Utilities.DesrializeMessagePack<SetPlayerName>(reader);

        #region Autogenerated
        public bool Equals(SetPlayerName other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;
            return Name == other.Name;
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != this.GetType()) return false;
            return Equals((SetPlayerName)obj);
        }

        public override int GetHashCode()
        {
            return (Name != null ? Name.GetHashCode() : 0);
        }
        #endregion
    }
}
